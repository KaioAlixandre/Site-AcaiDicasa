// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
provider = "prisma-client-js"
}

datasource db {
provider = "mysql"
url      = env("DATABASE_URL")
}

// ========= USER RELATED MODELS =========

model User {
id        Int       @id @default(autoincrement())
username  String    @unique @db.VarChar(50)
email     String    @unique @db.VarChar(100)
password  String    @db.VarChar(255)
phone     String?   @db.VarChar(20)
role      Role      @default(user)
createdAt DateTime  @default(now())

addresses Address[]
cart      Cart?
reviews   Review[]
orders    Order[]
}

model Address {
id           Int     @id @default(autoincrement())
street       String  @db.VarChar(255)
number       String  @db.VarChar(20)
complement   String? @db.VarChar(100)
neighborhood String  @db.VarChar(100)
isDefault    Boolean @default(false)

userId Int
user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ========= PRODUCT RELATED MODELS =========

model Product {
id            Int      @id @default(autoincrement())
name          String   @db.VarChar(255)
price         Decimal  @db.Decimal(10, 2)
description   String?  @db.Text
stock         Int      @default(0)
sku           String?  @unique @db.VarChar(50)
createdAt     DateTime @default(now())
updatedAt     DateTime @updatedAt

category      ProductCategory @relation(fields: [categoryId], references: [id])
categoryId    Int

images        ProductImage[]
reviews       Review[]
options       ProductOption[]
cartItems     CartItem[]
orderItems    OrderItem[]
}

model ProductImage {
id        Int    @id @default(autoincrement())
url       String @db.VarChar(255)

productId Int
product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductCategory {
id        Int      @id @default(autoincrement())
name      String   @unique @db.VarChar(100)
products  Product[]
}

model ProductOption {
id          Int      @id @default(autoincrement())
name        String   @db.VarChar(100)

productId   Int
product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
values      ProductOptionValue[]
}

model ProductOptionValue {
id        Int    @id @default(autoincrement())
value     String @db.VarChar(100)

optionId  Int
option    ProductOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
}

// ========= CART RELATED MODELS =========

model Cart {
id       Int        @id @default(autoincrement())
userId   Int        @unique
user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
items    CartItem[]
}

model CartItem {
id        Int      @id @default(autoincrement())
quantity  Int
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

cartId    Int
cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)

productId Int
product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

@@unique([cartId, productId])
}

// ========= ORDER RELATED MODELS =========

model Order {
id               Int          @id @default(autoincrement())
createdAt        DateTime     @default(now())
updatedAt        DateTime     @updatedAt
status           Status       @default(pending_payment)
total            Decimal      @db.Decimal(10, 2)
shippingAddress  String?      @db.VarChar(255)
merchantOrderId  String?      @unique @db.VarChar(255) // Campo para o ID da preferÃªncia do Mercado Pago

userId           Int
user             User         @relation(fields: [userId], references: [id])

orderItems       OrderItem[]
orderCoupons     OrderCoupon[]
}

model OrderItem {
id             Int       @id @default(autoincrement())
quantity       Int
priceAtOrder   Decimal   @db.Decimal(10, 2)

orderId        Int
order          Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)

productId      Int
product        Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
}

// ========= REVIEW AND COUPON MODELS =========

model Review {
id          Int      @id @default(autoincrement())
rating      Int
comment     String?  @db.Text
createdAt   DateTime @default(now())

userId      Int
user        User     @relation(fields: [userId], references: [id])

productId   Int
product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Coupon {
id               Int           @id @default(autoincrement())
code             String        @unique @db.VarChar(50)
discountType     DiscountType
discountValue    Decimal       @db.Decimal(5, 2)
expiresAt        DateTime?
usageLimit       Int?
usedCount        Int           @default(0)
isActive         Boolean       @default(true)
createdAt        DateTime      @default(now())

orderCoupons     OrderCoupon[]
}

model OrderCoupon {
id             Int      @id @default(autoincrement())
orderId        Int
order          Order    @relation(fields: [orderId], references: [id])

couponId       Int
coupon         Coupon   @relation(fields: [couponId], references: [id])

discountAmount Decimal @db.Decimal(10, 2)
}

// ========= REPORTING MODELS =========

model DailySalesReport {
id                Int      @id @default(autoincrement())
date              DateTime @unique @db.Date
totalSales        Decimal  @db.Decimal(12, 2)
orderCount        Int
totalItemsSold    Int
averageOrderValue Decimal  @db.Decimal(12, 2)
}

model ProductSalesReport {
id           Int      @id @default(autoincrement())
date         DateTime @db.Date
unitsSold    Int
totalRevenue Decimal  @db.Decimal(12, 2)

productId    Int
product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

@@unique([date, productId])
}

model CategorySalesReport {
id           Int      @id @default(autoincrement())
date         DateTime @db.Date
unitsSold    Int
totalRevenue Decimal  @db.Decimal(12, 2)

categoryId   Int
category     ProductCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

@@unique([date, categoryId])
}

// ========= ENUMS =========

enum Role {
user
admin
master
}

enum Status {
pending_payment
payment_received
being_prepared
on_the_way
delivered
canceled
}

enum DiscountType {
percentage
fixed
}