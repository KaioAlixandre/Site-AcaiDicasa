const express = require('express');
const router = express.Router();
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');

// A "chave secreta" para assinar o token. Mantenha em um arquivo de vari√°veis de ambiente.
const JWT_SECRET = process.env.JWT_SECRET;

// Middleware para verificar o token e adicionar o usu√°rio √† requisi√ß√£o
const authenticateToken = async (req, res, next) => {
    console.log('üîó [Middleware: authenticateToken] Verificando token de autentica√ß√£o...');
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (token == null) {
        console.warn('‚ö†Ô∏è [Middleware: authenticateToken] Token n√£o fornecido. Acesso negado.');
        return res.status(401).json({ message: 'Token n√£o fornecido.' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        const user = await prisma.user.findUnique({
            where: { id: decoded.id },
            select: { id: true, role: true } // Seleciona apenas o id e o papel
        });

        if (!user) {
            console.error('‚ùå [Middleware: authenticateToken] Usu√°rio n√£o encontrado para o token fornecido.');
            return res.status(404).json({ message: 'Usu√°rio n√£o encontrado.' });
        }

        req.user = user;
        console.log(`‚úÖ [Middleware: authenticateToken] Autentica√ß√£o bem-sucedida para o usu√°rio ID: ${req.user.id}.`);
        next();
    } catch (err) {
        console.error('üö´ [Middleware: authenticateToken] Token inv√°lido:', err.message);
        return res.status(403).json({ message: 'Token inv√°lido.' });
    }
};

// Middleware para verificar o papel do usu√°rio (admin, user, etc.)
const authorize = (role) => {
    return (req, res, next) => {
        console.log(`üîó [Middleware: authorize] Verificando se o usu√°rio tem o papel '${role}'.`);
        if (!req.user || req.user.role !== role) {
            console.warn(`üö´ [Middleware: authorize] Acesso negado. Papel necess√°rio: '${role}', Papel do usu√°rio: '${req.user ? req.user.role : 'n√£o autenticado'}'`);
            return res.status(403).json({ message: 'Acesso negado: voc√™ n√£o tem permiss√£o para realizar esta a√ß√£o.' });
        }
        console.log(`üëç [Middleware: authorize] Permiss√£o concedida para o usu√°rio com papel '${req.user.role}'.`);
        next();
    };
};

// Rota de Cadastro de Usu√°rio
router.post('/register', async (req, res) => {
    const { username, email, password } = req.body;
    console.log(`‚û°Ô∏è [POST /api/auth/register] Requisi√ß√£o de cadastro recebida para o e-mail: ${email}.`);
    try {
        // 1. Validar a entrada
        if (!username || !email || !password) {
            console.warn('‚ö†Ô∏è [POST /api/auth/register] Dados de cadastro incompletos.');
            return res.status(400).json({ message: 'Todos os campos s√£o obrigat√≥rios.' });
        }

        // 2. Verificar se o usu√°rio j√° existe
        const existingUser = await prisma.user.findUnique({ where: { email } });
        if (existingUser) {
            console.warn(`üö® [POST /api/auth/register] Tentativa de cadastro com e-mail j√° existente: ${email}.`);
            return res.status(409).json({ message: 'E-mail j√° cadastrado.' });
        }

        const existingUsername = await prisma.user.findUnique({ where: { username } });
        if (existingUsername) {
            console.warn(`üö® [POST /api/auth/register] Tentativa de cadastro com nome de usu√°rio j√° existente: ${username}.`);
            return res.status(409).json({ message: 'Nome de usu√°rio j√° cadastrado.' });
        }

        // 3. Hash da senha e cria√ß√£o do usu√°rio
        const hashedPassword = await bcrypt.hash(password, 10);
        const newUser = await prisma.user.create({
            data: { username, email, password: hashedPassword }
        });
        console.log(`‚ú® [POST /api/auth/register] Novo usu√°rio cadastrado com sucesso. ID: ${newUser.id}`);
        res.status(201).json({ message: 'Usu√°rio cadastrado com sucesso!', user: newUser });
    } catch (err) {
        console.error('‚ùå [POST /api/auth/register] Erro ao cadastrar usu√°rio:', err.message);
        res.status(500).json({ message: 'Erro ao cadastrar usu√°rio.', error: err.message });
    }
});

// Rota de Login
router.post('/login', async (req, res) => {
    const { email, password } = req.body;
    console.log(`‚û°Ô∏è [POST /api/auth/login] Requisi√ß√£o de login recebida para o e-mail: ${email}.`);
    try {
        const user = await prisma.user.findUnique({ where: { email } });
        if (!user || !(await bcrypt.compare(password, user.password))) {
            console.warn('‚ö†Ô∏è [POST /api/auth/login] Tentativa de login com credenciais inv√°lidas.');
            return res.status(400).json({ message: 'Credenciais inv√°lidas.' });
        }
        const token = jwt.sign({ id: user.id, role: user.role }, JWT_SECRET, { expiresIn: '1h' });
        console.log(`üëç [POST /api/auth/login] Login bem-sucedido para o usu√°rio ID: ${user.id}. Token gerado.`);
        res.status(200).json({ token, user: { id: user.id, username: user.username, role: user.role } });
    } catch (err) {
        console.error('‚ùå [POST /api/auth/login] Erro ao fazer login:', err.message);
        res.status(500).json({ message: 'Erro ao fazer login.', error: err.message });
    }
});

// Rota para obter o perfil do usu√°rio autenticado
router.get('/profile', authenticateToken, async (req, res) => {
    const userId = req.user.id;
    console.log(`üîç [GET /api/auth/profile] Requisi√ß√£o para obter o perfil do usu√°rio ID: ${userId}.`);
    try {
        const userProfile = await prisma.user.findUnique({
            where: { id: userId },
            select: {
                id: true,
                username: true,
                email: true,
                role: true,
                addresses: true,
                phone: true,
            },
        });
        if (!userProfile) {
            console.error(`üö® [GET /api/auth/profile] Perfil do usu√°rio ${userId} n√£o encontrado.`);
            return res.status(404).json({ message: 'Perfil n√£o encontrado.' });
        }
        console.log(`‚úÖ [GET /api/auth/profile] Perfil do usu√°rio ${userId} obtido com sucesso.`);
        res.status(200).json(userProfile);
    } catch (err) {
        console.error(`‚ùå [GET /api/auth/profile] Erro ao buscar o perfil do usu√°rio ${userId}:`, err.message);
        res.status(500).json({ message: 'Erro ao buscar o perfil.', error: err.message });
    }
});

// Rota para cadastrar um novo endere√ßo para o usu√°rio autenticado
router.post('/profile/address', authenticateToken, async (req, res) => {
    const userId = req.user.id;
    const { street, number, complement, neighborhood, city, state, zipCode, isDefault } = req.body;
    console.log(`‚û°Ô∏è [POST /api/auth/profile/address] Requisi√ß√£o para cadastrar novo endere√ßo para o usu√°rio ID: ${userId}.`);

    try {
        const newAddress = await prisma.address.create({
            data: {
                street,
                number,
                complement,
                neighborhood,
                isDefault,
                userId: userId,
            },
        });
        console.log(`‚ú® [POST /api/auth/profile/address] Novo endere√ßo cadastrado com sucesso. ID: ${newAddress.id}`);
        res.status(201).json({ message: 'Endere√ßo cadastrado com sucesso!', address: newAddress });
    } catch (err) {
        console.error(`‚ùå [POST /api/auth/profile/address] Erro ao cadastrar o endere√ßo para o usu√°rio ${userId}:`, err.message);
        res.status(500).json({ message: 'Erro ao cadastrar o endere√ßo.', error: err.message });
    }
});

// Rota para listar endere√ßos do usu√°rio autenticado
router.get('/profile/addresses', authenticateToken, async (req, res) => {
    const userId = req.user.id;
    console.log(`üîç [GET /api/auth/profile/addresses] Requisi√ß√£o para listar endere√ßos do usu√°rio ID: ${userId}.`);
    try {
        const addresses = await prisma.address.findMany({
            where: { userId: userId },
            orderBy: { isDefault: 'desc' }, // Garante que o endere√ßo padr√£o venha primeiro
        });
        console.log(`‚úÖ [GET /api/auth/profile/addresses] Encontrados ${addresses.length} endere√ßos para o usu√°rio ${userId}.`);
        res.status(200).json(addresses);
    } catch (err) {
        console.error(`‚ùå [GET /api/auth/profile/addresses] Erro ao buscar endere√ßos para o usu√°rio ${userId}:`, err.message);
        res.status(500).json({ message: 'Erro ao buscar endere√ßos.', error: err.message });
    }
});

// Rota para atualizar um endere√ßo existente do usu√°rio autenticado
router.put('/profile/address/:addressId', authenticateToken, async (req, res) => {
    const userId = req.user.id;
    const addressId = parseInt(req.params.addressId);
    const { street, number, complement, neighborhood, city, state, zipCode, isDefault } = req.body;
    console.log(`üîÑ [PUT /api/auth/profile/address/${addressId}] Requisi√ß√£o para atualizar endere√ßo para o usu√°rio ID: ${userId}.`);

    try {
        let updatedAddress;
        if (isDefault) {
            await prisma.$transaction(async (tx) => {
                // Remove o "padr√£o" de qualquer outro endere√ßo do usu√°rio
                await tx.address.updateMany({
                    where: { userId: userId, isDefault: true },
                    data: { isDefault: false }
                });

                // Atualiza o endere√ßo com os novos dados e define como padr√£o
                updatedAddress = await tx.address.update({
                    where: { id: addressId },
                    data: {
                        street,
                        number,
                        complement,
                        neighborhood,
                        isDefault: true,
                    }
                });
            });
        } else {
            updatedAddress = await prisma.address.update({
                where: { id: addressId },
                data: {
                    street,
                    number,
                    complement,
                    neighborhood,
                    isDefault: false,
                }
            });
        }

        console.log(`‚úÖ [PUT /api/auth/profile/address/${addressId}] Endere√ßo atualizado com sucesso. ID: ${updatedAddress.id}`);
        res.status(200).json({ message: 'Endere√ßo atualizado com sucesso!', address: updatedAddress });
    } catch (err) {
        console.error(`‚ùå [PUT /api/auth/profile/address/${addressId}] Erro ao atualizar o endere√ßo:`, err.message);
        res.status(500).json({ message: 'Erro ao atualizar o endere√ßo.', error: err.message });
    }
});

// Rota para atualizar o n√∫mero de telefone do usu√°rio autenticado
router.put('/profile/phone', authenticateToken, async (req, res) => {
    const userId = req.user.id;
    const { phone } = req.body;
    console.log(`üîÑ [PUT /api/auth/profile/phone] Requisi√ß√£o para atualizar telefone. Usu√°rio ID: ${userId}`);

    if (!phone) {
        console.warn(`‚ö†Ô∏è [PUT /api/auth/profile/phone] Tentativa de atualizar telefone sem o campo 'phone'.`);
        return res.status(400).json({ message: 'N√∫mero de telefone √© obrigat√≥rio.' });
    }

    try {
        const updatedUser = await prisma.user.update({
            where: { id: userId },
            data: { phone },
        });
        console.log(`‚úÖ [PUT /api/auth/profile/phone] Telefone do usu√°rio ${userId} atualizado com sucesso.`);
        res.status(200).json({ message: 'N√∫mero de telefone atualizado com sucesso!', user: updatedUser });
    } catch (err) {
        console.error(`‚ùå [PUT /api/auth/profile/phone] Erro ao atualizar o telefone para o usu√°rio ${userId}:`, err.message);
        res.status(500).json({ message: 'Erro ao atualizar o telefone.', error: err.message });
    }
});

module.exports = {
    router,
    authenticateToken,
    authorize
};
