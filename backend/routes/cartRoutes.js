const express = require('express');
const router = express.Router();
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();
const { authenticateToken } = require('./authRoutes');

// Rota para adicionar um produto ao carrinho
router.post('/add', authenticateToken, async (req, res) => {
    const userId = req.user.id;
    const { productId, quantity } = req.body;

    console.log(`‚û°Ô∏è [POST /api/cart/add] Requisi√ß√£o para adicionar item. Usu√°rio ID: ${userId}, Produto ID: ${productId}, Quantidade: ${quantity}.`);

    if (!productId || !quantity) {
        console.warn('‚ö†Ô∏è [POST /api/cart/add] Falha ao adicionar item: ID do produto ou quantidade ausente.');
        return res.status(400).json({ message: 'ID do produto e quantidade s√£o obrigat√≥rios.' });
    }

    try {
        let cart = await prisma.cart.findUnique({
            where: { userId: userId },
            include: { cartitem: true }
        });

        if (!cart) {
            console.log(`üõí [POST /api/cart/add] Carrinho n√£o encontrado para o usu√°rio ${userId}. Criando novo carrinho.`);
            cart = await prisma.cart.create({
                data: {
                    userId: userId,
                },
            });
        }

        const existingCartItem = await prisma.cartitem.findUnique({
            where: {
                cartId_productId: {
                    cartId: cart.id,
                    productId: productId,
                },
            },
        });

        if (existingCartItem) {
            const updatedItem = await prisma.cartitem.update({
                where: { id: existingCartItem.id },
                data: { quantity: existingCartItem.quantity + quantity },
            });
            console.log(`üîÑ [POST /api/cart/add] Quantidade do item no carrinho atualizada. Item ID: ${updatedItem.id}`);
            return res.status(200).json({ message: 'Quantidade do item atualizada com sucesso.', cartItem: updatedItem });
        } else {
            const newCartItem = await prisma.cartitem.create({
                data: {
                    cartId: cart.id,
                    productId: productId,
                    quantity: quantity,
                },
            });
            console.log(`‚úÖ [POST /api/cart/add] Novo item adicionado ao carrinho. Item ID: ${newCartItem.id}`);
            return res.status(201).json({ message: 'Item adicionado ao carrinho com sucesso.', cartItem: newCartItem });
        }
    } catch (err) {
        console.error('‚ùå [POST /api/cart/add] Erro ao adicionar produto ao carrinho:', err.message);
        res.status(500).json({ message: 'Erro ao adicionar produto ao carrinho.', error: err.message });
    }
});

// Rota para buscar o carrinho do usu√°rio
router.get('/', authenticateToken, async (req, res) => {
    const userId = req.user.id;
    console.log(`üîç [GET /api/cart] Requisi√ß√£o para buscar o carrinho do usu√°rio ID: ${userId}.`);

    try {
        const cart = await prisma.cart.findUnique({
            where: { userId: userId },
            include: {
                cartitem: {
                    include: {
                        product: true
                    }
                }
            }
        });

        if (!cart) {
            console.warn(`‚ö†Ô∏è [GET /api/cart] Carrinho n√£o encontrado para o usu√°rio ${userId}. Retornando carrinho vazio.`);
            return res.status(200).json({ items: [], cartTotal: 0 });
        }

        const cartItemsWithTotals = cart.cartitem.map(item => {
            // Verificar se √© a√ßa√≠ personalizado
            let itemPrice = item.product.price; // Pre√ßo padr√£o
            
            if (item.selectedOptions && item.selectedOptions.customAcai) {
                // Se for a√ßa√≠ personalizado, usar o valor escolhido pelo usu√°rio
                itemPrice = item.selectedOptions.customAcai.value;
                console.log(`üé® Item personalizado encontrado: ${item.product.name} - Valor customizado: R$ ${itemPrice}`);
            }
            
            return {
                ...item,
                totalPrice: item.quantity * itemPrice
            };
        });

        const cartTotal = cartItemsWithTotals.reduce((total, item) => total + item.totalPrice, 0);

        console.log(`‚úÖ [GET /api/cart] Carrinho do usu√°rio ${userId} encontrado com ${cart.cartitem.length} itens.`);
        res.status(200).json({
            items: cartItemsWithTotals,
            cartTotal: cartTotal
        });
    } catch (err) {
        console.error(`‚ùå [GET /api/cart] Erro ao buscar o carrinho do usu√°rio ${userId}:`, err.message);
        res.status(500).json({ message: 'Erro ao buscar o carrinho.', error: err.message });
    }
});

// Rota para atualizar a quantidade de um item no carrinho
router.put('/update/:cartItemId', authenticateToken, async (req, res) => {
    const { cartItemId } = req.params;
    const { quantity } = req.body;
    console.log(`üîÑ [PUT /api/cart/update/${cartItemId}] Requisi√ß√£o para atualizar item. Item ID: ${cartItemId}, Nova Quantidade: ${quantity}.`);

    if (quantity === undefined) {
        console.warn('‚ö†Ô∏è [PUT /api/cart/update] Quantidade n√£o fornecida.');
        return res.status(400).json({ message: 'A quantidade √© obrigat√≥ria.' });
    }

    try {
        const updatedItem = await prisma.cartitem.update({
            where: { id: parseInt(cartItemId) },
            data: { quantity: parseInt(quantity) },
        });
        console.log(`‚úÖ [PUT /api/cart/update/${cartItemId}] Quantidade do item atualizada com sucesso. Item ID: ${updatedItem.id}`);
        res.status(200).json({ message: 'Quantidade do item atualizada com sucesso.', cartItem: updatedItem });
    } catch (err) {
        console.error(`‚ùå [PUT /api/cart/update/${cartItemId}] Erro ao atualizar a quantidade do item:`, err.message);
        res.status(500).json({ message: 'Erro ao atualizar a quantidade do item.', error: err.message });
    }
});

// Rota para remover um item do carrinho
router.delete('/remove/:cartItemId', authenticateToken, async (req, res) => {
    const { cartItemId } = req.params;
    console.log(`üóëÔ∏è [DELETE /api/cart/remove/${cartItemId}] Requisi√ß√£o para remover item. Item ID: ${cartItemId}.`);

    try {
        await prisma.cartitem.delete({
            where: { id: parseInt(cartItemId) },
        });
        console.log(`‚úÖ [DELETE /api/cart/remove/${cartItemId}] Item removido do carrinho com sucesso.`);
        res.status(200).json({ message: 'Item removido do carrinho com sucesso.' });
    } catch (err) {
        console.error(`‚ùå [DELETE /api/cart/remove/${cartItemId}] Erro ao remover item do carrinho:`, err.message);
        res.status(500).json({ message: 'Erro ao remover o item do carrinho.', error: err.message });
    }
});

// Rota para esvaziar o carrinho
router.delete('/clear', authenticateToken, async (req, res) => {
    const userId = req.user.id;
    console.log(`‚û°Ô∏è [DELETE /api/cart/clear] Requisi√ß√£o para esvaziar carrinho. Usu√°rio ID: ${userId}.`);

    try {
        const cart = await prisma.cart.findUnique({
            where: { userId: userId },
        });

        if (!cart) {
            console.warn(`‚ö†Ô∏è [DELETE /api/cart/clear] Carrinho n√£o encontrado para o usu√°rio ${userId}. Nada a ser esvaziado.`);
            return res.status(200).json({ message: 'Carrinho j√° est√° vazio.' });
        }

        await prisma.cartitem.deleteMany({
            where: { cartId: cart.id },
        });

        console.log(`üßπ [DELETE /api/cart/clear] Carrinho do usu√°rio ${userId} esvaziado com sucesso.`);
        res.status(200).json({ message: 'Carrinho esvaziado com sucesso.' });
    } catch (err) {
        console.error(`‚ùå [DELETE /api/cart/clear] Erro ao esvaziar o carrinho para o usu√°rio ${userId}:`, err.message);
        res.status(500).json({ message: 'Erro ao esvaziar o carrinho.', error: err.message });
    }
});

// Rota para adicionar a√ßa√≠ personalizado ao carrinho
router.post('/add-custom-acai', authenticateToken, async (req, res) => {
    const userId = req.user.id;
    const { value, selectedComplements, complementNames, quantity } = req.body;

    console.log(`‚û°Ô∏è [POST /api/cart/add-custom-acai] Requisi√ß√£o para adicionar a√ßa√≠ personalizado. Usu√°rio ID: ${userId}, Valor: R$${value}, Quantidade: ${quantity}.`);

    if (!value || !quantity) {
        console.warn('‚ö†Ô∏è [POST /api/cart/add-custom-acai] Falha: Valor ou quantidade ausente.');
        return res.status(400).json({ message: 'Valor e quantidade s√£o obrigat√≥rios.' });
    }

    try {
        // Buscar o produto "A√ßa√≠ Personalizado"
        const customAcaiProduct = await prisma.product.findFirst({
            where: { name: 'A√ßa√≠ Personalizado' }
        });

        if (!customAcaiProduct) {
            console.error('‚ùå [POST /api/cart/add-custom-acai] Produto "A√ßa√≠ Personalizado" n√£o encontrado.');
            return res.status(404).json({ message: 'Produto a√ßa√≠ personalizado n√£o encontrado.' });
        }

        // Buscar ou criar carrinho
        let cart = await prisma.cart.findUnique({
            where: { userId: userId },
            include: { cartitem: true }
        });

        if (!cart) {
            console.log(`üõí [POST /api/cart/add-custom-acai] Criando novo carrinho para usu√°rio ${userId}.`);
            cart = await prisma.cart.create({
                data: { userId: userId },
            });
        }

        // Criar estrutura de op√ß√µes personalizadas
        const selectedOptions = {
            customAcai: {
                value: value,
                selectedComplements: selectedComplements || [],
                complementNames: complementNames || []
            }
        };

        // Adicionar item do a√ßa√≠ personalizado ao carrinho
        // Cada a√ßa√≠ personalizado √© √∫nico, ent√£o sempre criar novo item
        const cartItem = await prisma.cartitem.create({
            data: {
                cartId: cart.id,
                productId: customAcaiProduct.id,
                quantity: quantity,
                selectedOptions: selectedOptions
            }
        });

        console.log(`‚úÖ [POST /api/cart/add-custom-acai] A√ßa√≠ personalizado adicionado com sucesso. Item ID: ${cartItem.id}`);
        res.status(201).json({ 
            message: 'A√ßa√≠ personalizado adicionado ao carrinho com sucesso.', 
            cartItem: cartItem 
        });

    } catch (err) {
        console.error(`‚ùå [POST /api/cart/add-custom-acai] Erro ao adicionar a√ßa√≠ personalizado para o usu√°rio ${userId}:`, err.message);
        res.status(500).json({ message: 'Erro ao adicionar a√ßa√≠ personalizado ao carrinho.', error: err.message });
    }
});

module.exports = router;
