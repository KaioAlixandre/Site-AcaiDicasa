generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model address {
  id           Int     @id @default(autoincrement())
  street       String  @db.VarChar(255)
  number       String  @db.VarChar(20)
  complement   String? @db.VarChar(100)
  neighborhood String  @db.VarChar(100)
  isDefault    Boolean @default(false)
  userId       Int
  user         user    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Address_userId_fkey")

  @@index([userId], map: "Address_userId_fkey")
}

model cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique(map: "Cart_userId_key")
  createdAt DateTime   @default(now())
  user      user       @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Cart_userId_fkey")
  cartitem  cartitem[]
}

model cartitem {
  id              Int      @id @default(autoincrement())
  cartId          Int
  productId       Int
  quantity        Int
  createdAt       DateTime @default(now())
  selectedOptions Json?
  cart            cart     @relation(fields: [cartId], references: [id], onDelete: Cascade, map: "CartItem_cartId_fkey")
  product         product  @relation(fields: [productId], references: [id], onDelete: Cascade, map: "CartItem_productId_fkey")

  @@unique([cartId, productId], map: "CartItem_cartId_productId_key")
  @@index([productId], map: "CartItem_productId_fkey")
}

model categorysalesreport {
  id              Int             @id @default(autoincrement())
  date            DateTime        @db.Date
  unitsSold       Int
  totalRevenue    Decimal         @db.Decimal(12, 2)
  categoryId      Int
  productcategory productcategory @relation(fields: [categoryId], references: [id], onDelete: Cascade, map: "CategorySalesReport_categoryId_fkey")

  @@unique([date, categoryId], map: "CategorySalesReport_date_categoryId_key")
  @@index([categoryId], map: "CategorySalesReport_categoryId_fkey")
}

model coupon {
  id           Int                 @id @default(autoincrement())
  code         String              @unique(map: "Coupon_code_key") @db.VarChar(50)
  discountType coupon_discountType
  value        Decimal             @db.Decimal(10, 2)
  expiresAt    DateTime?
  isActive     Boolean             @default(true)
  maxUses      Int?
  usedCount    Int                 @default(0)
  ordercoupon  ordercoupon[]
}

model dailysalesreport {
  id                Int      @id @default(autoincrement())
  date              DateTime @unique(map: "DailySalesReport_date_key") @db.Date
  totalSales        Decimal  @db.Decimal(12, 2)
  orderCount        Int
  totalItemsSold    Int
  averageOrderValue Decimal  @db.Decimal(12, 2)
}

model deliverer {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100)
  phone     String   @db.VarChar(20)
  email     String?  @db.VarChar(100)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  order     order[]
}

model optionvalue {
  id            Int           @id @default(autoincrement())
  value         String        @db.VarChar(100)
  priceModifier Decimal       @default(0.00) @db.Decimal(10, 2)
  optionId      Int
  productoption productoption @relation(fields: [optionId], references: [id], onDelete: Cascade, map: "OptionValue_optionId_fkey")

  @@index([optionId], map: "OptionValue_optionId_fkey")
}

model order {
  id                   Int          @id @default(autoincrement())
  userId               Int
  status               order_status @default(being_prepared)
  totalPrice           Decimal      @db.Decimal(10, 2)
  createdAt            DateTime     @default(now())
  shippingComplement   String?
  shippingNeighborhood String?
  shippingNumber       String?
  shippingStreet       String?
  shippingPhone        String?
  deliveryFee          Decimal      @default(0.00) @db.Decimal(10, 2)
  deliveryType         String       @default("delivery")
  delivererId          Int?
  updatedAt            DateTime
  deliverer            deliverer?   @relation(fields: [delivererId], references: [id], map: "Order_delivererId_fkey")
  user                 user         @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Order_userId_fkey")
  ordercoupon          ordercoupon?
  orderitem            orderitem[]
  payment              payment?

  @@index([delivererId], map: "Order_delivererId_fkey")
  @@index([userId], map: "Order_userId_fkey")
}

model ordercoupon {
  id             Int     @id @default(autoincrement())
  orderId        Int     @unique(map: "OrderCoupon_orderId_key")
  couponId       Int
  discountAmount Decimal @db.Decimal(10, 2)
  coupon         coupon  @relation(fields: [couponId], references: [id], map: "OrderCoupon_couponId_fkey")
  order          order   @relation(fields: [orderId], references: [id], map: "OrderCoupon_orderId_fkey")

  @@index([couponId], map: "OrderCoupon_couponId_fkey")
}

model orderitem {
  id                      Int     @id @default(autoincrement())
  orderId                 Int
  productId               Int
  quantity                Int
  priceAtOrder            Decimal @db.Decimal(10, 2)
  selectedOptionsSnapshot Json?
  order                   order   @relation(fields: [orderId], references: [id], onDelete: Cascade, map: "OrderItem_orderId_fkey")
  product                 product @relation(fields: [productId], references: [id], onDelete: Cascade, map: "OrderItem_productId_fkey")

  @@index([orderId], map: "OrderItem_orderId_fkey")
  @@index([productId], map: "OrderItem_productId_fkey")
}

model payment {
  id            Int            @id @default(autoincrement())
  amount        Decimal        @db.Decimal(10, 2)
  method        payment_method
  status        payment_status @default(PENDING)
  transactionId String?        @db.VarChar(255)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime
  orderId       Int            @unique(map: "Payment_orderId_key")
  order         order          @relation(fields: [orderId], references: [id], onDelete: Cascade, map: "Payment_orderId_fkey")
}

model product {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(255)
  price              Decimal              @db.Decimal(10, 2)
  description        String?              @db.Text
  createdAt          DateTime             @default(now())
  categoryId         Int?
  isActive           Boolean              @default(true)
  cartitem           cartitem[]
  orderitem          orderitem[]
  productcategory    productcategory?     @relation(fields: [categoryId], references: [id], map: "Product_categoryId_fkey")
  productimage       productimage[]
  productoption      productoption[]
  productsalesreport productsalesreport[]
  review             review[]

  @@index([categoryId], map: "Product_categoryId_fkey")
}

model productcategory {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique(map: "ProductCategory_name_key") @db.VarChar(100)
  categorysalesreport categorysalesreport[]
  product             product[]
}

model productimage {
  id        Int     @id @default(autoincrement())
  url       String  @db.VarChar(255)
  altText   String? @db.VarChar(255)
  productId Int
  product   product @relation(fields: [productId], references: [id], onDelete: Cascade, map: "ProductImage_productId_fkey")

  @@index([productId], map: "ProductImage_productId_fkey")
}

model productoption {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(100)
  productId   Int
  optionvalue optionvalue[]
  product     product       @relation(fields: [productId], references: [id], onDelete: Cascade, map: "ProductOption_productId_fkey")

  @@index([productId], map: "ProductOption_productId_fkey")
}

model productsalesreport {
  id           Int      @id @default(autoincrement())
  date         DateTime @db.Date
  unitsSold    Int
  totalRevenue Decimal  @db.Decimal(12, 2)
  productId    Int
  product      product  @relation(fields: [productId], references: [id], onDelete: Cascade, map: "ProductSalesReport_productId_fkey")

  @@unique([date, productId], map: "ProductSalesReport_date_productId_key")
  @@index([productId], map: "ProductSalesReport_productId_fkey")
}

model review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String?  @db.Text
  createdAt DateTime @default(now())
  userId    Int
  productId Int
  product   product  @relation(fields: [productId], references: [id], onDelete: Cascade, map: "Review_productId_fkey")
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Review_userId_fkey")

  @@unique([userId, productId], map: "Review_userId_productId_key")
  @@index([productId], map: "Review_productId_fkey")
}

model storeconfig {
  id          Int      @id @default(autoincrement())
  isOpen      Boolean  @default(true)
  openingTime String   @db.VarChar(5)
  closingTime String   @db.VarChar(5)
  openDays    String   @db.VarChar(20)
  updatedAt   DateTime
}

model user {
  id        Int       @id @default(autoincrement())
  username  String    @unique(map: "User_username_key") @db.VarChar(50)
  email     String    @unique(map: "User_email_key") @db.VarChar(100)
  password  String    @db.VarChar(255)
  role      user_role @default(user)
  createdAt DateTime  @default(now())
  phone     String?   @db.VarChar(20)
  address   address[]
  cart      cart?
  order     order[]
  review    review[]
}

enum coupon_discountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum order_status {
  pending_payment
  being_prepared
  ready_for_pickup
  on_the_way
  delivered
  canceled
}

enum payment_method {
  CREDIT_CARD
  PIX
  CASH_ON_DELIVERY
}

enum payment_status {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum user_role {
  user
  admin
  master
}
